Args: ./bazel-bin/tools/qe-opt --debug --gate-merging tests/transformation_results/affine_loop_fusion.mlir -o tests/transformation_results/gate_merged.mlir 
Load new dialect in Context builtin
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ShapedType)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemRefLayoutAttrInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::TypedAttr)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ElementsAttr)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BytecodeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SymbolOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpAsmOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionKindInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ConditionallySpeculatable)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemoryEffectOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ResourceBlobManagerDialectInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpAsmDialectInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BytecodeDialectInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineBinaryOpExprStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineConstantExprStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineDimExprStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineMapStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::IntegerSetStorage)
Load new dialect in Context builtin
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CastOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestructurableTypeInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroOperands<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneRegion<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroResults<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroSuccessors<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::NoRegionArguments<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::NoTerminator<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SingleBlock<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OpInvariants<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BytecodeOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AffineScope<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::IsIsolatedFromAbove<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SymbolTable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SymbolOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpAsmOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionKindInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::HasOnlyGraphRegion<Empty>)
Load new dialect in Context func
Load new dialect in Context cf
Load new dialect in Context arith
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::ArithFastMathInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::VectorUnrollOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferTypeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferIntRangeInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DialectInlinerInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::bufferization::BufferizableOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ValueBoundsOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BranchOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CallOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SymbolUserOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CallableOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::FunctionOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AutomaticAllocationScope<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CallableOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::FunctionOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroRegions<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneResult<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ConstantLike<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ConditionallySpeculatable::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemoryEffectOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferIntRangeInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferTypeOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties)
Load new dialect in Context ensemble
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<Empty>)
Load new dialect in Context affine
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineDmaStartOp)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineMapAccessInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineDmaWaitOp)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::LoopLikeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionBranchOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineReadOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineWriteOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::VariadicResults<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::VariadicOperands<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::HasRecursiveMemoryEffects<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::LoopLikeOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionBranchOpInterface::Trait<Empty>)
Load new dialect in Context tensor
Load new dialect in Context complex
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ShapedDimOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ReifyRankedShapedTypeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OffsetSizeAndStrideOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestinationStyleOpInterface)
Load new dialect in Context linalg
Load new dialect in Context math
Load new dialect in Context memref
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CopyOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::PromotableMemOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestructurableAccessorOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::PromotableAllocationOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestructurableAllocationOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ViewLikeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RuntimeVerifiableOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::linalg::LinalgOp)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::linalg::ContractionOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::linalg::ConvolutionOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::linalg::FillOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::TilingInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::PartialReductionOpInterface)
Ignoring repeated interface registration
Ignoring repeated interface registration
ImplicitTypeIDRegistry::lookupOrInsert(mlir::transform::FindPayloadReplacementOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneOperand<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SameOperandsAndResultShape<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CastOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::VectorUnrollOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Elementwise<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Scalarizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Vectorizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Tensorizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneTypedResult<mlir::qe::ensemble::GateType>::Impl<Empty>)
Load new dialect in Context scf
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionBranchTerminatorOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ParallelCombiningOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AtLeastNOperands<3>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::IsTerminator<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp, mlir::scf::ForOp, mlir::scf::IfOp, mlir::scf::IndexSwitchOp, mlir::scf::ParallelOp, mlir::scf::WhileOp>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ReturnLike<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::MemRefsNormalizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::NOperands<2>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::IsCommutative<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SameOperandsAndResultType<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::OpToOpPassAdaptor)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DialectFoldInterface)

//===-------------------------------------------===//
Processing operation : 'func.return'(0x134e6ce00) {
  "func.return"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.yield'(0x134e51410) {
  "affine.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.transmit_results'(0x134e6ecc0) {
  "ensemble.transmit_results"(%10) : (tensor<21x!ensemble.cbit>) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.yield'(0x134e6ed90) {
  "affine.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.measure'(0x134e6f770) {
  "ensemble.measure"(%17, %18) : (!ensemble.physical_qubit, !ensemble.cbit) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6f6a0) {
  %18 = "tensor.extract"(%10, %arg1) : (tensor<21x!ensemble.cbit>, index) -> !ensemble.cbit

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.for'(0x134e6f800) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6f600) {
  %17 = "tensor.extract"(%9, %arg1) : (tensor<21x!ensemble.physical_qubit>, index) -> !ensemble.physical_qubit

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.yield'(0x134e4a720) {
  "affine.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.yield'(0x134e6f3c0) {
  "scf.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6f4d0) {
  "ensemble.apply"(%16, %17, %19) : (!ensemble.gate, !ensemble.physical_qubit, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
"mlir::qe::ensemble::MergeEnsembleApply" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x134e6f2f0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6f420) {
  "ensemble.apply"(%15, %17, %19) : (!ensemble.gate, !ensemble.physical_qubit, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
"mlir::qe::ensemble::MergeEnsembleApply" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6f160) {
  "ensemble.apply"(%15, %17, %19) : (!ensemble.gate, !ensemble.physical_qubit, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
"mlir::qe::ensemble::MergeEnsembleApply" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6efa0) {
  %19 = "tensor.extract"(%9, %18) : (tensor<21x!ensemble.physical_qubit>, index) -> !ensemble.physical_qubit

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x134e6eed0) {
  %18 = "arith.addi"(%arg1, %6) : (index, index) -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.for'(0x134e6f580) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6edf0) {
  %17 = "tensor.extract"(%9, %arg1) : (tensor<21x!ensemble.physical_qubit>, index) -> !ensemble.physical_qubit

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.yield'(0x134e6e6b0) {
  "affine.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.yield'(0x134e6e9b0) {
  "scf.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6ea90) {
  "ensemble.apply"(%14, %17) : (!ensemble.gate, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
"mlir::qe::ensemble::MergeEnsembleApply" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x134e6e7e0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6ea00) {
  "ensemble.apply"(%13, %17) : (!ensemble.gate, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::detail::AddFOpGenericAdaptorBase::Properties)
    ** Insert  : 'arith.addf'(0x134e6f880)
    ** Insert  : 'arith.addf'(0x134e6f930)
    ** Insert  : 'arith.addf'(0x134e6f9e0)
    ** Insert  : 'ensemble.gate'(0x134e6fa90)
    ** Erase   : 'ensemble.apply'(0x134e6ea00)
"mlir::qe::ensemble::MergeEnsembleApply" result 1
  } -> success : pattern applied successfully
// *** IR Dump After Pattern Application ***
mlir-asm-printer: Verifying operation: func.func
func.func @main() {
  %cst = arith.constant 0.000000e+00 : f64
  %cst_0 = arith.constant 3.1415926535897931 : f64
  %cst_1 = arith.constant 1.5707963267948966 : f64
  %cst_2 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8]> : tensor<9xi32>
  %c21 = arith.constant 21 : index
  %c20 = arith.constant 20 : index
  %c1 = arith.constant 1 : index
  %c9 = arith.constant 9 : index
  %c0 = arith.constant 0 : index
  %0 = ensemble.program_alloc 21 : () -> tensor<21x!ensemble.physical_qubit>
  %1 = ensemble.alloc_cbits 21 : () -> tensor<21x!ensemble.cbit>
  affine.for %arg0 = 0 to 9 {
    %extracted = tensor.extract %cst_2[%arg0] : tensor<9xi32>
    %2 = arith.index_cast %extracted : i32 to index
    %3 = ensemble.gate "U3" 1(%cst_1, %cst, %cst_0) {"nativized-created", "nativized-peeked"} : (f64, f64, f64) -> !ensemble.gate
    %4 = ensemble.gate "U3" "inverse" 1(%cst_1, %cst, %cst_0) {"nativized-created", "nativized-peeked"} : (f64, f64, f64) -> !ensemble.gate
    %5 = ensemble.gate "CX" 2 {"nativized-peeked"} : () -> !ensemble.gate
    %6 = ensemble.gate "CX" "inverse" 2 {"nativized-peeked"} : () -> !ensemble.gate
    ensemble.quantum_program_iteration {
      ensemble.reset_tensor %0 : (tensor<21x!ensemble.physical_qubit>) -> ()
      affine.for %arg1 = 0 to 21 {
        %extracted_3 = tensor.extract %0[%arg1] : tensor<21x!ensemble.physical_qubit>
        ensemble.apply %3 %extracted_3 : (!ensemble.gate, !ensemble.physical_qubit) -> ()
        scf.for %arg2 = %c0 to %2 step %c1 {
          %7 = arith.addf %cst_1, %cst_1 : f64
          %8 = arith.addf %cst, %cst : f64
          %9 = arith.addf %cst_0, %cst_0 : f64
          %10 = ensemble.gate "U3" "inverse" 1(%7, %8, %9) {"generated-by-merging", "nativized-created", "nativized-peeked"} : (f64, f64, f64) -> !ensemble.gate
          ensemble.apply %10 {"cannot-merge"} %extracted_3 : (!ensemble.gate, !ensemble.physical_qubit) -> ()
        }
      }
      affine.for %arg1 = 0 to 20 {
        %extracted_3 = tensor.extract %0[%arg1] : tensor<21x!ensemble.physical_qubit>
        %7 = arith.addi %arg1, %c1 : index
        %extracted_4 = tensor.extract %0[%7] : tensor<21x!ensemble.physical_qubit>
        ensemble.apply %5 %extracted_3, %extracted_4 : (!ensemble.gate, !ensemble.physical_qubit, !ensemble.physical_qubit) -> ()
        scf.for %arg2 = %c0 to %2 step %c1 {
          ensemble.apply %5 %extracted_3, %extracted_4 : (!ensemble.gate, !ensemble.physical_qubit, !ensemble.physical_qubit) -> ()
          ensemble.apply %6 %extracted_3, %extracted_4 : (!ensemble.gate, !ensemble.physical_qubit, !ensemble.physical_qubit) -> ()
        }
      }
      affine.for %arg1 = 0 to 21 {
        %extracted_3 = tensor.extract %0[%arg1] : tensor<21x!ensemble.physical_qubit>
        %extracted_4 = tensor.extract %1[%arg1] : tensor<21x!ensemble.cbit>
        ensemble.measure %extracted_3, %extracted_4 : (!ensemble.physical_qubit, !ensemble.cbit) -> ()
      }
      ensemble.transmit_results %1 : (tensor<21x!ensemble.cbit>) -> ()
    }
  }
  return
}


} -> success : pattern matched
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6fa90) {
  %21 = "ensemble.gate"(%18, %19, %20) {"generated-by-merging", inverse = "inverse", name = "U3", "nativized-created", "nativized-peeked", num_operands = 1 : i32} : (f64, f64, f64) -> !ensemble.gate

ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::ArithFastMathInterface::Trait<Empty>)
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addf'(0x134e6f9e0) {
  %20 = "arith.addf"(%1, %1) <{fastmath = #arith.fastmath<none>}> : (f64, f64) -> f64

  ** Insert  : 'arith.constant'(0x134e6d410)
  ** Replace : 'arith.addf'(0x134e6f9e0)
  ** Modified: 'ensemble.gate'(0x134e6fa90)
  ** Erase   : 'arith.addf'(0x134e6f9e0)
} -> success : operation was folded
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6fa90) {
  %21 = "ensemble.gate"(%19, %20, %0) {"generated-by-merging", inverse = "inverse", name = "U3", "nativized-created", "nativized-peeked", num_operands = 1 : i32} : (f64, f64, f64) -> !ensemble.gate

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e6d410) {
  %0 = "arith.constant"() <{value = 6.2831853071795862 : f64}> : () -> f64

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addf'(0x134e6f930) {
  %20 = "arith.addf"(%1, %1) <{fastmath = #arith.fastmath<none>}> : (f64, f64) -> f64

  ** Replace : 'arith.addf'(0x134e6f930)
  ** Modified: 'ensemble.gate'(0x134e6fa90)
  ** Erase   : 'arith.addf'(0x134e6f930)
} -> success : operation was folded
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6fa90) {
  %20 = "ensemble.gate"(%19, %1, %0) {"generated-by-merging", inverse = "inverse", name = "U3", "nativized-created", "nativized-peeked", num_operands = 1 : i32} : (f64, f64, f64) -> !ensemble.gate

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x134e6e7e0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addf'(0x134e6f880) {
  %19 = "arith.addf"(%3, %3) <{fastmath = #arith.fastmath<none>}> : (f64, f64) -> f64

  ** Replace : 'arith.addf'(0x134e6f880)
  ** Modified: 'ensemble.gate'(0x134e6fa90)
  ** Erase   : 'arith.addf'(0x134e6f880)
} -> success : operation was folded
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x134e6e7e0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6fa90) {
  %19 = "ensemble.gate"(%2, %1, %0) {"generated-by-merging", inverse = "inverse", name = "U3", "nativized-created", "nativized-peeked", num_operands = 1 : i32} : (f64, f64, f64) -> !ensemble.gate

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6d640) {
  "ensemble.apply"(%14, %18) : (!ensemble.gate, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
"mlir::qe::ensemble::MergeEnsembleApply" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.for'(0x134e4a810) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6d5b0) {
  %18 = "tensor.extract"(%10, %arg1) : (tensor<21x!ensemble.physical_qubit>, index) -> !ensemble.physical_qubit

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.quantum_program_iteration'(0x134e6ed30) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.reset_tensor'(0x134e6cf20) {
  "ensemble.reset_tensor"(%10) : (tensor<21x!ensemble.physical_qubit>) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6cd40) {
  %17 = "ensemble.gate"() {inverse = "inverse", name = "CX", "nativized-peeked", num_operands = 2 : i32} : () -> !ensemble.gate

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6c980) {
  %16 = "ensemble.gate"() {name = "CX", "nativized-peeked", num_operands = 2 : i32} : () -> !ensemble.gate

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6ca10) {
  %15 = "ensemble.gate"(%3, %1, %2) {inverse = "inverse", name = "U3", "nativized-created", "nativized-peeked", num_operands = 1 : i32} : (f64, f64, f64) -> !ensemble.gate

  ** Erase   : 'ensemble.gate'(0x134e6ca10)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6c760) {
  %14 = "ensemble.gate"(%3, %1, %2) {name = "U3", "nativized-created", "nativized-peeked", num_operands = 1 : i32} : (f64, f64, f64) -> !ensemble.gate

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x134e6c540) {
  %13 = "arith.index_cast"(%12) : (i32) -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.for'(0x134e51610) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6c310) {
  %12 = "tensor.extract"(%4, %arg0) : (tensor<9xi32>, index) -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.alloc_cbits'(0x134e4c2e0) {
  %11 = "ensemble.alloc_cbits"() {circuit_size = 21 : i32} : () -> tensor<21x!ensemble.cbit>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.program_alloc'(0x134e4ca40) {
  %10 = "ensemble.program_alloc"() {circuit_size = 21 : i32} : () -> tensor<21x!ensemble.physical_qubit>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4b880) {
  %9 = "arith.constant"() <{value = 0 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4b7e0) {
  %8 = "arith.constant"() <{value = 9 : index}> : () -> index

  ** Erase   : 'arith.constant'(0x134e4b7e0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4b750) {
  %7 = "arith.constant"() <{value = 1 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4b430) {
  %6 = "arith.constant"() <{value = 20 : index}> : () -> index

  ** Erase   : 'arith.constant'(0x134e4b430)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4b3c0) {
  %5 = "arith.constant"() <{value = 21 : index}> : () -> index

  ** Erase   : 'arith.constant'(0x134e4b3c0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4b080) {
  %4 = "arith.constant"() <{value = dense<[0, 1, 2, 3, 4, 5, 6, 7, 8]> : tensor<9xi32>}> : () -> tensor<9xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4af10) {
  %3 = "arith.constant"() <{value = 1.5707963267948966 : f64}> : () -> f64

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4acd0) {
  %2 = "arith.constant"() <{value = 3.1415926535897931 : f64}> : () -> f64

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.func'(0x134e6c810) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4a9c0) {
  %1 = "arith.constant"() <{value = 0.000000e+00 : f64}> : () -> f64

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.return'(0x134e6ce00) {
  "func.return"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.yield'(0x134e51410) {
  "affine.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.transmit_results'(0x134e6ecc0) {
  "ensemble.transmit_results"(%8) : (tensor<21x!ensemble.cbit>) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.yield'(0x134e6ed90) {
  "affine.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.measure'(0x134e6f770) {
  "ensemble.measure"(%14, %15) : (!ensemble.physical_qubit, !ensemble.cbit) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6f6a0) {
  %15 = "tensor.extract"(%8, %arg1) : (tensor<21x!ensemble.cbit>, index) -> !ensemble.cbit

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.for'(0x134e6f800) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6f600) {
  %14 = "tensor.extract"(%7, %arg1) : (tensor<21x!ensemble.physical_qubit>, index) -> !ensemble.physical_qubit

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.yield'(0x134e4a720) {
  "affine.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.yield'(0x134e6f3c0) {
  "scf.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6f4d0) {
  "ensemble.apply"(%13, %14, %16) : (!ensemble.gate, !ensemble.physical_qubit, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
"mlir::qe::ensemble::MergeEnsembleApply" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x134e6f2f0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6f420) {
  "ensemble.apply"(%12, %14, %16) : (!ensemble.gate, !ensemble.physical_qubit, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
"mlir::qe::ensemble::MergeEnsembleApply" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6f160) {
  "ensemble.apply"(%12, %14, %16) : (!ensemble.gate, !ensemble.physical_qubit, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
"mlir::qe::ensemble::MergeEnsembleApply" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6efa0) {
  %16 = "tensor.extract"(%7, %15) : (tensor<21x!ensemble.physical_qubit>, index) -> !ensemble.physical_qubit

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x134e6eed0) {
  %15 = "arith.addi"(%arg1, %5) : (index, index) -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.for'(0x134e6f580) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6edf0) {
  %14 = "tensor.extract"(%7, %arg1) : (tensor<21x!ensemble.physical_qubit>, index) -> !ensemble.physical_qubit

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.yield'(0x134e6e6b0) {
  "affine.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.yield'(0x134e6e9b0) {
  "scf.yield"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6ea90) {
  "ensemble.apply"(%15, %14) {"cannot-merge"} : (!ensemble.gate, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
"mlir::qe::ensemble::MergeEnsembleApply" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x134e6e7e0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6fa90) {
  %15 = "ensemble.gate"(%2, %1, %0) {"generated-by-merging", inverse = "inverse", name = "U3", "nativized-created", "nativized-peeked", num_operands = 1 : i32} : (f64, f64, f64) -> !ensemble.gate

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.apply'(0x134e6d640) {
  "ensemble.apply"(%11, %14) {"cannot-merge"} : (!ensemble.gate, !ensemble.physical_qubit) -> ()


  * Pattern mlir::qe::ensemble::MergeEnsembleApply : 'ensemble.apply -> ()' {
Trying to match "mlir::qe::ensemble::MergeEnsembleApply"
"mlir::qe::ensemble::MergeEnsembleApply" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.for'(0x134e4a810) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6d5b0) {
  %14 = "tensor.extract"(%7, %arg1) : (tensor<21x!ensemble.physical_qubit>, index) -> !ensemble.physical_qubit

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.quantum_program_iteration'(0x134e6ed30) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.reset_tensor'(0x134e6cf20) {
  "ensemble.reset_tensor"(%7) : (tensor<21x!ensemble.physical_qubit>) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6cd40) {
  %13 = "ensemble.gate"() {inverse = "inverse", name = "CX", "nativized-peeked", num_operands = 2 : i32} : () -> !ensemble.gate

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6c980) {
  %12 = "ensemble.gate"() {name = "CX", "nativized-peeked", num_operands = 2 : i32} : () -> !ensemble.gate

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.gate'(0x134e6c760) {
  %11 = "ensemble.gate"(%3, %1, %2) {name = "U3", "nativized-created", "nativized-peeked", num_operands = 1 : i32} : (f64, f64, f64) -> !ensemble.gate

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x134e6c540) {
  %10 = "arith.index_cast"(%9) : (i32) -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'affine.for'(0x134e51610) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x134e6c310) {
  %9 = "tensor.extract"(%4, %arg0) : (tensor<9xi32>, index) -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.alloc_cbits'(0x134e4c2e0) {
  %8 = "ensemble.alloc_cbits"() {circuit_size = 21 : i32} : () -> tensor<21x!ensemble.cbit>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'ensemble.program_alloc'(0x134e4ca40) {
  %7 = "ensemble.program_alloc"() {circuit_size = 21 : i32} : () -> tensor<21x!ensemble.physical_qubit>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4b880) {
  %6 = "arith.constant"() <{value = 0 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4b750) {
  %5 = "arith.constant"() <{value = 1 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4b080) {
  %4 = "arith.constant"() <{value = dense<[0, 1, 2, 3, 4, 5, 6, 7, 8]> : tensor<9xi32>}> : () -> tensor<9xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4af10) {
  %3 = "arith.constant"() <{value = 1.5707963267948966 : f64}> : () -> f64

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4acd0) {
  %2 = "arith.constant"() <{value = 3.1415926535897931 : f64}> : () -> f64

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e4a9c0) {
  %1 = "arith.constant"() <{value = 0.000000e+00 : f64}> : () -> f64

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.func'(0x134e6c810) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x134e6d410) {
  %0 = "arith.constant"() <{value = 6.2831853071795862 : f64}> : () -> f64

} -> failure : pattern failed to match
//===-------------------------------------------===//
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::PreservedAnalyses::AllAnalysesType)
mlir-asm-printer: Verifying operation: builtin.module

real	0m3.129s
user	0m3.024s
sys	0m0.074s
