# deterministic inputs
loop_repetitions = [0, 1, 2, 3, 4];

num_circuits = 500;
num_circuits_per_loop_repetition = 100;
num_qubits = 24;

# precomputed values before circuit sampling

# values passed in during circuit sampling
global circuit_index;

# variables sampled / computed every time we sample a circuit
phase_gate_powers = int_uniform(low=0, high=4, size=(4, num_qubits, 2));
num_loop_repetitions = circuit_index // num_circuits_per_loop_repetition;

# qubits and classical bits
qubit qubits[num_qubits];
bit bits[num_qubits];

# circuit description - 1D Ising QAOA on 24 qubits, 4 layers
# problem hamiltonian - adjacent ZZ terms
# mixer hamiltonian - single-qubit Pauli X rotations
reset qubits;

for (i = 0; i < num_qubits; i++) {
	gate1q "H" qubits[i];

	for (j = 0; j < num_loop_repetitions; j++) {
		gate1q "H" qubits[i];
		@inverse gate1q "H" qubits[i];
	}
}

for (layer_index = 0; layer_index < 4; layer_index++) {
	for (i = 0; i < num_qubits - 1; i += 2) {
		gate2q "CX" qubits[i], qubits[i + 1];
		
		for (j = 0; j < num_loop_repetitions; j++) {
			gate2q "CX" qubits[i], qubits[i + 1];
			@inverse gate2q "CX" qubits[i], qubits[i + 1];
		}

		gate1q ["S", "Z", "Sdg", "I"][phase_gate_powers[layer_index][i + 1][0]] qubits[i + 1];

		for (j = 0; j < num_loop_repetitions; j++) {
			gate1q ["S", "Z", "Sdg", "I"][phase_gate_powers[layer_index][i + 1][0]] qubits[i + 1];
			gate1q ["Sdg", "Z", "S", "I"][phase_gate_powers[layer_index][i + 1][0]] qubits[i + 1];
		}

		gate2q "CX" qubits[i], qubits[i + 1];
		
		for (j = 0; j < num_loop_repetitions; j++) {
			gate2q "CX" qubits[i], qubits[i + 1];
			@inverse gate2q "CX" qubits[i], qubits[i + 1];
		}
	}

	for (i = 1; i < num_qubits - 1; i += 2) {
		gate2q "CX" qubits[i], qubits[i + 1];
		
		for (j = 0; j < num_loop_repetitions; j++) {
			gate2q "CX" qubits[i], qubits[i + 1];
			@inverse gate2q "CX" qubits[i], qubits[i + 1];
		}

		gate1q ["S", "Z", "Sdg", "I"][phase_gate_powers[layer_index][i + 1][0]] qubits[i + 1];

		for (j = 0; j < num_loop_repetitions; j++) {
			gate1q ["S", "Z", "Sdg", "I"][phase_gate_powers[layer_index][i + 1][0]] qubits[i + 1];
			@inverse gate1q ["S", "Z", "Sdg", "I"][phase_gate_powers[layer_index][i + 1][0]] qubits[i + 1];
		}

		gate2q "CX" qubits[i], qubits[i + 1];
		
		for (j = 0; j < num_loop_repetitions; j++) {
			gate2q "CX" qubits[i], qubits[i + 1];
			@inverse gate2q "CX" qubits[i], qubits[i + 1];
		}
	}

	# Checkpoint 1

	for (i = 0; i < num_qubits; i++) {
		gate1q "S" qubits[i];

		for (j = 0; j < num_loop_repetitions; j++) {
			gate1q "S" qubits[i];
			@inverse gate1q "S" qubits[i];
		}

		gate1q "P" qubits[i];

		for (j = 0; j < num_loop_repetitions; j++) {
			gate1q "P" qubits[i];
			@inverse gate1q "P" qubits[i];
		}

		gate1q ["S", "Z", "Sdg", "I"][phase_gate_powers[layer_index][i + 1][0]] qubits[i + 1];

		for (j = 0; j < num_loop_repetitions; j++) {
			gate1q ["S", "Z", "Sdg", "I"][phase_gate_powers[layer_index][i + 1][0]] qubits[i + 1];
			@inverse gate1q ["S", "Z", "Sdg", "I"][phase_gate_powers[layer_index][i + 1][0]] qubits[i + 1];
		}

		gate1q "P" qubits[i];

		for (j = 0; j < num_loop_repetitions; j++) {
			gate1q "P" qubits[i];
			@inverse gate1q "P" qubits[i];
		}

		gate1q "S" qubits[i];

		for (j = 0; j < num_loop_repetitions; j++) {
			gate1q "S" qubits[i];
			@inverse gate1q "S" qubits[i];
		}
	}	
}

for (i = 0; i < num_qubits; i++) {
	measure qubits[i], bits[i];
}
