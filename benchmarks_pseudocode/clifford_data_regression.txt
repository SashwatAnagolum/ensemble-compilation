# deterministic inputs

# precomputed values before circuit sampling

# random variables sampled every time we sample a circuit
phase_gate_powers = int_uniform(low=0, high=4, size=(4, 16))

# values passed in during circuit sampling
global circuit_index;

# qubits and classical bits
qubit qubits[16];
bit bits[16];

# circuit description - 1D Ising QAOA on 16 qubits
# problem hamiltonian - adjacent ZZ terms
# mixer hamiltonian - single-qubit Pauli X rotations
reset qubits;

for (i = 0; i < 16; i++) {
	gate1q "H" qubits[i];
}

for (i = 0; i < 15; i++) {
	gate2q "CX" qubits[i], qubits[i + 1];
	
	for (j = 0; j < phase_gate_powers[0][i]; j++) {
		gate1q "S" qubits[i + 1];
	}

	gate2q "CX" qubits[i], qubits[i + 1];
}

for (i = 0; i < 16; i++) {
	gate1q "S" qubits[i];
	gate1q "P" qubits[i];

	for (j = 0; j < phase_gate_powers[1][i]; j++) {
		gate1q "S" qubits[i];
	}

	gate1q "P" qubits[i];
	gate1q "S" qubits[i];
}

for (i = 0; i < 15; i++) {
	gate2q "CX" qubits[i], qubits[i + 1];
	
	for (j = 0; j < phase_gate_powers[2][i]; j++) {
		gate1q "S" qubits[i + 1];
	}

	gate2q "CX" qubits[i], qubits[i + 1];
}

for (i = 0; i < 16; i++) {
	gate1q "S" qubits[i];
	gate1q "P" qubits[i];

	for (j = 0; j < phase_gate_powers[3][i]; j++) {
		gate1q "S" qubits[i];
	}

	gate1q "P" qubits[i];
	gate1q "S" qubits[i];

	measure qubits[i], bits[i];
}
