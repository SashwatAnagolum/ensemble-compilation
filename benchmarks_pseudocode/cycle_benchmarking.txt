# deterministic inputs
num_random_paulis = 64;
num_frame_randomizations = 10;
num_repetitions = [4, 8, 12];
num_qubits = 8;

# precomputed values before circuit sampling
edge_frame_randomization = [
	["Y", "Y", "X"],
	["X", "X", "Y"],
	["X", "Y", "Z"]
]

# values passed in during circuit sampling
global circuit_index;

# random variables sampled every time we sample a circuit
if (!(circuit_index % 30)) {
	pauli_indices = int_uniform(low=0, high=3, size=(num_qubits,));	
}

rc_indices = int_uniform(low=0, high=3, size=(13, num_qubits));

# qubits and classical bits
qubit qubits[num_qubits];
bit bits[num_qubits];

# circuit description - CNOTs on 8 qubits
reset qubits;

# state preparation and zeroth frame randomization
for (i = 0; i < num_qubits; i++) {
	gate1q edge_frame_randomization[pauli_indices[i]][rc_indices[0][i]] qubits[i];
}

# repeated application of gate cycle and frame randomizations
for (rep_index = 1; rep_index < num_repetitions[circuit_index % 3]; rep_index++) {
	for (i = 0; i < num_qubits; i += 2) {
		gate2q "CZ" qubits[i], qubits[i + 1];
	}

	for (i = 0; i < num_qubits; i++) {
		gate1q ["X", "Y", "Z"][rc_indices[rep_index][i]] qubits[i];
	}
}

# measure in basis of the chosen Pauli
for (i = 0; i < num_qubits; i++) {
	gate1q edge_frame_randomization[pauli_indices[i]][rc_indices[num_repetitions[circuit_index % 3] - 1][i]] qubits[i];
}

measure qubits, bits;