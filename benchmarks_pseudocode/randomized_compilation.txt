# deterministic inputs

# precomputed values before circuit sampling
pi = 3.14159265359;

# random variables sampled every time we sample a circuit
pauli_randomization_indices = int_uniform(low=0, high=3, size=(13, 4))

# values passed in during circuit sampling
global circuit_index;

# qubits and classical bits
qubit qubits[4];
bit bits[4];

# circuit description - Quantum Fourier Transform on 4 qubits
reset qubits;

# cycle 1
for (i = 0; i < 4; i++) {
	gate1q "H" qubits[i];
}

# cycle 2
gate1q "RZ" (pi / 4) qubits[1];
gate1q "RZ" (pi / 8) qubits[2];
gate1q "RZ" (pi / 16) qubits[3];

# cycle 3
gate2q "CX" qubits[1], qubits[0];

# cycle 4
gate1q "RZ" (-1 * pi / 4) qubits[0];

# cycle 5
gate2q "CX" qubits[1], qubits[0];

# cycle 6
gate1q "RZ" (pi / 4) qubits[0];

# cycle 7
gate2q "CX" qubits[2], qubits[0];

# cycle 8
gate1q "RZ" (-1 * pi / 8) qubits[0];

# cycle 9
gate2q "CX" qubits[2], qubits[0];

# cycle 10
gate1q "RZ" (pi / 8) qubits[0];
gate1q "RZ" (pi / 4) qubits[2];

# cycle 11
gate2q "CX" qubits[3], qubits[0];
gate2q "CX" qubits[2], qubits[1];

# cycle 12
gate1q "RZ" (-1 * pi / 16) qubits[0];
gate1q "RZ" (-1 * pi / 4) qubits[1];

# cycle 13
gate2q "CX" qubits[3], qubits[0];
gate2q "CX" qubits[2], qubits[1];

# cycle 14
gate1q "RZ" (pi / 16) qubits[0];
gate1q "RZ" (pi / 4) qubits[1];
gate1q "RZ" (pi / 8) qubits[3];

# cycle 15
gate2q "CX" qubits[3], qubits[1];

# cycle 16
gate1q "RZ" (-1 * pi / 8) qubits[1];

# cycle 17
gate2q "CX" qubits[3], qubits[1];

# cycle 18
gate1q "RZ" (pi / 8) qubits[1];
gate1q "RZ" (pi / 4) qubits[3];

# cycle 19
gate2q "CX" qubits[3], qubits[2];

# cycle 20
gate1q "RZ" (-1 * pi / 4) qubits[2];

# cycle 21
gate2q "CX" qubits[3], qubits[2];

# cycle 22
gate1q "RZ" (pi / 4) qubits[2];

# cycle 23
gate2q "CX" qubits[3], qubits[0];
gate2q "CX" qubits[2], qubits[1];

# cycle 24
gate2q "CX" qubits[0], qubits[3];
gate2q "CX" qubits[1], qubits[2];

# cycle 25
gate2q "CX" qubits[3], qubits[0];
gate2q "CX" qubits[2], qubits[1];
