# deterministic inputs
num_circuits = 1024;
num_measurement_bases = 1024;
num_qubits = 4;
 
# values passed in during circuit sampling
global circuit_index;

# precomputed values before circuit sampling
pauli_measurement_shifts = [
	["I", "I", "I"],
	["I", "H", "I"],
	["S", "H", "I"],
	["I", "I", "X"],
	["I", "H", "X"],
	["S", "H", "X"],
];


# random variables sampled every time we sample a circuit
state_prep_indices = int_uniform(low=0, high=6, size=(num_qubits))
measurement_indices = int_uniform(low=0, high=6, size=(num_qubits))

# qubits and classical bits
qubit qubits[num_qubits];
bit bits[num_qubits];

# circuit description - GHZ-4
for (i = 0; i < num_qubits; i++) {
	@inverse gate1q pauli_measurement_shifts[state_prep_indices[i]][2] qubits[i];
	@inverse gate1q pauli_measurement_shifts[state_prep_indices[i]][1] qubits[i];
	@inverse gate1q pauli_measurement_shifts[state_prep_indices[i]][0] qubits[i];
}

gate1q "H" qubits[0];

for (i = 0; i < num_qubits - 1; i++) {
	gate2q "CX" qubits[i], qubits[i + 1];
}

for (i = 0; i < num_qubits; i++) {
	gate1q pauli_measurement_shifts[measurement_indices[i]][0] qubits[i];
	gate1q pauli_measurement_shifts[measurement_indices[i]][1] qubits[i];
	gate1q pauli_measurement_shifts[measurement_indices[i]][2] qubits[i];
}

for (i = 0; i < num_qubits; i++) {
	measure qubits[i], bits[i];
}